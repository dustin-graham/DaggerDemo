// Code generated by dagger-compiler.  Do not edit.
package com.dustin.example.android.module;


import dagger.internal.Binding;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class PumpModule$$ModuleAdapter extends ModuleAdapter<PumpModule> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public PumpModule$$ModuleAdapter() {
    super(INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, true /*library*/);
  }

  @Override
  protected PumpModule newModule() {
    return new com.dustin.example.android.module.PumpModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(Map<String, Binding<?>> map) {
    map.put("com.dustin.example.android.activity.Pump", new ProvidePumpProvidesAdapter(module));
  }

  /**
   * A {@code Binder<com.dustin.example.android.activity.Pump>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code com.dustin.example.android.activity.Pump} and its
   * dependencies.
   * 
   * Being a {@code Provider<com.dustin.example.android.activity.Pump>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidePumpProvidesAdapter extends Binding<com.dustin.example.android.activity.Pump>
      implements Provider<com.dustin.example.android.activity.Pump> {
    private final PumpModule module;
    private Binding<com.dustin.example.android.activity.Thermosiphon> pump;

    public ProvidePumpProvidesAdapter(PumpModule module) {
      super("com.dustin.example.android.activity.Pump", null, NOT_SINGLETON, "com.dustin.example.android.module.PumpModule.providePump()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      pump = (Binding<com.dustin.example.android.activity.Thermosiphon>) linker.requestBinding("com.dustin.example.android.activity.Thermosiphon", PumpModule.class);
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(pump);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.dustin.example.android.activity.Pump>}.
     */
    @Override
    public com.dustin.example.android.activity.Pump get() {
      return module.providePump(pump.get());
    }
  }
}
