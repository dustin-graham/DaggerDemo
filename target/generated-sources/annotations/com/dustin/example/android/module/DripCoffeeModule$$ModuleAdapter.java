// Code generated by dagger-compiler.  Do not edit.
package com.dustin.example.android.module;


import dagger.internal.Binding;
import dagger.internal.ModuleAdapter;
import java.util.Map;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class DripCoffeeModule$$ModuleAdapter extends ModuleAdapter<DripCoffeeModule> {
  private static final String[] INJECTS = { "members/com.dustin.example.android.activity.MyActivity", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { com.dustin.example.android.module.PumpModule.class, };

  public DripCoffeeModule$$ModuleAdapter() {
    super(INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, false /*library*/);
  }

  @Override
  protected DripCoffeeModule newModule() {
    return new com.dustin.example.android.module.DripCoffeeModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(Map<String, Binding<?>> map) {
    map.put("com.dustin.example.android.activity.Heater", new ProvideHeaterProvidesAdapter(module));
  }

  /**
   * A {@code Binder<com.dustin.example.android.activity.Heater>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<com.dustin.example.android.activity.Heater>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideHeaterProvidesAdapter extends Binding<com.dustin.example.android.activity.Heater>
      implements Provider<com.dustin.example.android.activity.Heater> {
    private final DripCoffeeModule module;

    public ProvideHeaterProvidesAdapter(DripCoffeeModule module) {
      super("com.dustin.example.android.activity.Heater", null, IS_SINGLETON, "com.dustin.example.android.module.DripCoffeeModule.provideHeater()");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.dustin.example.android.activity.Heater>}.
     */
    @Override
    public com.dustin.example.android.activity.Heater get() {
      return module.provideHeater();
    }
  }
}
