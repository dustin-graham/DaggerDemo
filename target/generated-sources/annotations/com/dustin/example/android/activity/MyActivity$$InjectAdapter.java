// Code generated by dagger-compiler.  Do not edit.
package com.dustin.example.android.activity;


import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binder<MyActivity>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 * 
 * Owning the dependency links between {@code MyActivity} and its
 * dependencies.
 * 
 * Being a {@code Provider<MyActivity>} and handling creation and
 * preparation of object instances.
 * 
 * Being a {@code MembersInjector<MyActivity>} and handling injection
 * of annotated fields.
 */
public final class MyActivity$$InjectAdapter extends Binding<MyActivity>
    implements Provider<MyActivity>, MembersInjector<MyActivity> {
  private Binding<com.dustin.example.android.service.PlaybackServiceClient> mPlaybackServiceClient;
  private Binding<BaseActivity> supertype;

  public MyActivity$$InjectAdapter() {
    super("com.dustin.example.android.activity.MyActivity", "members/com.dustin.example.android.activity.MyActivity", NOT_SINGLETON, MyActivity.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    mPlaybackServiceClient = (Binding<com.dustin.example.android.service.PlaybackServiceClient>) linker.requestBinding("com.dustin.example.android.service.PlaybackServiceClient", MyActivity.class);
    supertype = (Binding<BaseActivity>) linker.requestBinding("members/com.dustin.example.android.activity.BaseActivity", MyActivity.class, false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(mPlaybackServiceClient);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<MyActivity>}.
   */
  @Override
  public MyActivity get() {
    MyActivity result = new MyActivity();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<MyActivity>}.
   */
  @Override
  public void injectMembers(MyActivity object) {
    object.mPlaybackServiceClient = mPlaybackServiceClient.get();
    supertype.injectMembers(object);
  }
}
